generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  created_at   DateTime?    @default(now())
  updated_at   DateTime?    @updatedAt
  first_name   String?      @db.VarChar(255)
  last_name    String?      @db.VarChar(255)
  email        String       @unique @db.VarChar(255)
  password     String?      @db.VarChar(255)
  phone_number String?      @db.VarChar(255)
  gender       String?      @db.VarChar(255)
  role         String?      @db.VarChar(255)
  customer     Customer?
  host         Host?
  Booking      Booking[]
  HouseImage   HouseImage[]
  Review       Review[]

  @@map("user")
}

model Customer {
  id            Int       @id @default(autoincrement())
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt
  profile_photo String?   @db.VarChar(1000)
  user_id       Int?      @unique
  user          User?     @relation(fields: [user_id], references: [id])

  @@map("customer")
}

model Host {
  id            Int       @id @default(autoincrement())
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt
  is_superhost  Boolean?  @default(false)
  is_verified   Boolean?  @default(false)
  profile_photo String?   @db.VarChar(1000)
  user_id       Int?      @unique
  user          User?     @relation(fields: [user_id], references: [id])
  house         House[]

  @@map("host")
}

model House {
  id                  Int          @id @default(autoincrement())
  created_at          DateTime?    @default(now())
  updated_at          DateTime?    @updatedAt
  name                String?      @db.VarChar(255)
  description         String?      @db.VarChar(1000)
  property_type       Int?
  address             String?      @db.VarChar(255)
  max_guests          Int?
  cancellation_policy String?      @db.VarChar(1000)
  bedrooms            Int?
  beds                Int?
  bathrooms           Int?
  price               Int?
  is_active           Boolean?     @default(false)
  host_id             Int?
  host                Host?        @relation(fields: [host_id], references: [id])
  amenity             Amenity[]    @relation("house_amenity")
  location_id         Int?
  location            Location?    @relation(fields: [location_id], references: [id])
  booking             Booking[]
  HouseImage          HouseImage[]
  Review              Review[]

  @@map("house")
}

model HouseImage {
  id          Int       @id @default(autoincrement())
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  image       String?   @db.VarChar(1000)
  uploaded_by Int?
  user        User?     @relation(fields: [uploaded_by], references: [id])
  house_id    Int?
  house       House?    @relation(fields: [house_id], references: [id])

  @@map("house_image")
}

model Location {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  location   String?   @db.VarChar(255)
  city       String?   @db.VarChar(255)
  image      String?   @db.VarChar(1000)
  House      House[]

  @@map("location")
}

model Review {
  id          Int       @id @default(autoincrement())
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  comment     String?   @db.VarChar(1000)
  rating      Int?
  reviewed_by Int?
  user        User?     @relation(fields: [reviewed_by], references: [id])
  house_id    Int?
  house       House?    @relation(fields: [house_id], references: [id])

  @@map("review")
}

model Amenity {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  code       String?   @db.VarChar(10)
  name       String?   @db.VarChar(255)
  house      House[]   @relation("house_amenity")

  @@map("amenity")
}

model Booking {
  id                 Int                  @id @default(autoincrement())
  created_at         DateTime?            @default(now())
  updated_at         DateTime?            @updatedAt
  booking_date       DateTime?
  check_in_date      String?
  check_out_date     String?
  guest_number       Int?
  price_per_day      Int?
  total_price        Int?
  payment_method     String?              @db.VarChar(255)
  house_id           Int?
  house              House?               @relation(fields: [house_id], references: [id])
  user_id            Int?
  user               User?                @relation(fields: [user_id], references: [id])
  PaymentTransaction PaymentTransaction[]

  @@map("booking")
}

model PaymentTransaction {
  id              Int       @id @default(autoincrement())
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  ref             String?   @db.VarChar(255)
  amount          Int?
  payment_date    DateTime?
  is_success      Boolean?  @default(false)
  payment_gateway String?   @db.VarChar(255)
  booking_id      Int?
  booking         Booking?  @relation(fields: [booking_id], references: [id])

  @@map("payment_transaction")
}
